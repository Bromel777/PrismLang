# Обмен одних токенов на другие
# Курс первоначального обмена(rate) выбирается инициатором эмиссии
# lessBase - монета выхода дешевле в rate раз базовой
# YourRegularContractHash пользователь берёт из Walet'a

сontract (signature: Signature25519, transaction: Transaction) = {
  let rate = 2
  let lessBase = true
  let acceptableTokenId = Array((101).toByte, (100).toByte)

  def getNumToExchange(amount: Int, rate: Int, lessBase: Bool): Int = {
    if(lessBase) {
      if (amount%rate==0) amount/rate else amount/rate + 1
    } else {
      amount * rate
    }
  }

  def amAbleToOpen(assetBox: AssetBox): Bool = {
    if(let assetBox : AssetBox = box) {
      assetBox.contractHash == YourRegularContractHash
    } else false
  }

  def getAmountFromBox(tokenId: Array[Byte], box : Box) = {
    if(let assetBox : AssetBox = box) {
      if(assetBox.tokenId == tokenId).amount
    } else 0
  }

  def hasTokenId(tokenId: Array[Byte], box : Box) = {
    if(let assetBox : AssetBox = box) {
      if(assetBox.tokenId == tokenId) true else false
    } else false
  }

  let byuAmount = getAmountFromBox(transaction.outputs.filter(lamb(x: Box) = !hasTokenId(acceptableTokenId, x))[0])
  let wantBuyOurs = getNumToExchange(buyAmount, rate, lessBase)
  if (wantBuyOurs > 0) {
    let changeBox = transaction.outputs.filter(lamb(x: Box) = !hasTokenId(self.tokenId, x))[0]
    declaredChangeAmount = getAmountFromBox(changeBox)
    if ((self.amount - wantBuyOurs == declaredChangeAmount) && amAbleToOpen(changeBox)) true else false
  } else false
}